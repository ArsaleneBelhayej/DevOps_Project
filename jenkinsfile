pipeline {
    agent any

    tools {
        jdk 'JDK17'
        maven 'Maven3'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }


    stages {

            stage('Determine Version Increment') {
                steps {
                    script {
                        def currentVersion = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()

                        def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                        echo "Commit Message: ${commitMessage}"

                        def (major, minor, patch) = currentVersion.tokenize('.').collect { it as int }

                        if (commitMessage.contains("[major]")) {
                            major += 1
                            minor = 0
                            patch = 0
                        } else if (commitMessage.contains("[minor]")) {
                            minor += 1
                            patch = 0
                        } else {
                            patch += 1
                        }

                        def newVersion = "${major}.${minor}.${patch}"
                        echo "New Version: ${newVersion}"

                        sh "mvn versions:set -DnewVersion=${newVersion}"

                        env.NEW_VERSION = newVersion
                    }
                }
            }

            stage('Clean') {
                steps {
                    sh "mvn clean install"
                }
            }

            stage('Push Updated POM') {
                        steps {
                            script {
                                sh 'git add pom.xml'
                                sh "git commit -m 'Auto-update version to ${env.NEW_VERSION}'"
                                sh 'git push origin etudiant-service'
                            }
                        }
                    }


            stage('Setup DB') {
                steps {
                    script {
                        sh 'docker-compose up -d'
                    }
                }
            }

            stage('Compile') {
                steps {
                    sh "mvn compile"
                }
            }
            stage('Test') {
                steps {
                    sh "mvn test -Dspring.profiles.active=local"
                }
            }


             stage('Generate JaCoCo Report') {
                        steps {
                              sh "mvn jacoco:report"
                          }
             }


             stage('SonarQube Analysis') {
                       steps {
                           script {
                               withSonarQubeEnv('sonar') {
                                    sh '''
                                        $SCANNER_HOME/bin/sonar-scanner \
                                        -Dsonar.projectName=etudiant-service \
                                        -Dsonar.projectKey=etudiant-service
                                      '''

                      }
                  }
             }

            stage('Quality Gate') {
                steps {
                    script {
                        waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                    }
                }
            }

            stage('Build') {
                steps {
                    sh "mvn package -Dspring.profiles.active=local "
                }
            }

            stage('Publish To Nexus') {
                steps {
                    withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'JDK17', maven: 'Maven3', traceability: true) {
                        sh "mvn deploy -Dspring.profiles.active=local "
                    }
                }
            }

            stage('Build & Tag Docker Image') {
                steps {
                    script {
                        withDockerRegistry(credentialsId: 'docker-cred') {
                            sh "docker build -t samixouerfelli/etudiant-service:latest ."
                        }
                    }
                }
            }

            stage('Push Docker Image') {
                steps {
                    script {
                        withDockerRegistry(credentialsId: 'docker-cred') {
                            sh "docker push samixouerfelli/etudiant-service:latest"
                        }
                    }
                }
            }

            stage('Deploy To Kubernetes') {
                steps {
                    withKubeConfig(caCertificate: '', clusterName: 'devops-k8s-cluster', contextName: 'devops-k8s-cluster', credentialsId: 'k8-cred', namespace: 'devops-project', serverUrl: 'https://devops-k8s-devops-resource--8172e1-o65hj7y3.hcp.centralus.azmk8s.io:443') {
                        sh "kubectl apply -f etudiant-dep.yml"

                    }
                }
            }

            stage('Verify the Deployment') {
                steps {
                    withKubeConfig(caCertificate: '', clusterName: 'devops-k8s-cluster', contextName: 'devops-k8s-cluster', credentialsId: 'k8-cred', namespace: 'devops-project', serverUrl: 'https://devops-k8s-devops-resource--8172e1-o65hj7y3.hcp.centralus.azmk8s.io:443') {
                        sh "kubectl get pods -n devops-project"
                        sh "kubectl get svc -n devops-project"
                    }
                }
            }
    }
}
