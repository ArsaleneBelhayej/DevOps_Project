pipeline {
    agent any

    tools {
        jdk 'JDK17'
        maven 'Maven3'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Clean') {
            steps {
                sh "mvn clean"
            }
        }

        stage('Setup DB') {
            steps {
                script {
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }

        stage('Test') {
            steps {
                sh "mvn test -Dspring.profiles.active=local"
            }
        }

        stage('Generate JaCoCo Report') {
            steps {
                sh "mvn jacoco:report"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonar') {
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=etudiant-service \
                            -Dsonar.projectKey=etudiant-service
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Build') {
            steps {
                sh "mvn package -Dspring.profiles.active=local"
            }
        }

        stage('Publish To Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'JDK17', maven: 'Maven3', traceability: true) {
                    sh "mvn deploy -Dspring.profiles.active=local"
                }
            }
        }

        stage('Build & Tag Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh "docker build -t samixouerfelli/etudiant-service:latest ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh "docker push samixouerfelli/etudiant-service:latest"
                    }
                }
            }
        }

        stage('Deploy To Kubernetes') {
            steps {
                withKubeConfig(
                    caCertificate: '',
                    clusterName: 'devops-k8s-cluster',
                    contextName: 'devops-k8s-cluster',
                    credentialsId: 'k8-cred',
                    namespace: 'devops-project',
                    serverUrl: 'https://devops-k8s-devops-resource--8172e1-o65hj7y3.hcp.centralus.azmk8s.io:443'
                ) {
                    sh "kubectl apply -f etudiant-dep.yml"
                }
            }
        }

        stage('Verify the Deployment') {
            steps {
                withKubeConfig(
                    caCertificate: '',
                    clusterName: 'devops-k8s-cluster',
                    contextName: 'devops-k8s-cluster',
                    credentialsId: 'k8-cred',
                    namespace: 'devops-project',
                    serverUrl: 'https://devops-k8s-devops-resource--8172e1-o65hj7y3.hcp.centralus.azmk8s.io:443'
                ) {
                    sh "kubectl get pods -n devops-project"
                    sh "kubectl get svc -n devops-project"
                }
            }
        }
    }

    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'SUCCESS'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
                def failedStage = ""
                def errorSnippet = ""

                if (pipelineStatus != 'SUCCESS') {
                    // Find the stage that failed and capture a log snippet
                    currentBuild.rawBuild.getExecution().getStages().each { stage ->
                        if (stage.getStatus().toString() == "FAILED") {
                            failedStage = stage.getName()
                            def logLines = currentBuild.rawBuild.getLog(50)  // Capture the last 50 lines of the log
                            errorSnippet = logLines.findAll { it.contains("ERROR") || it.contains("Exception") }.join("<br>")
                        }
                    }
                }

                def body = """
                    <html>
                    <body>
                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                        <h2>${jobName} - Build ${buildNumber}</h2>
                        <div style="background-color: ${bannerColor}; padding: 10px;">
                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                        </div>
                        <p><strong>Failed Stage:</strong> ${failedStage}</p>
                        <p><strong>Error Details:</strong><br> ${errorSnippet}</p>
                        <p>Check the <a href="${BUILD_URL}">console output</a> for more details.</p>
                    </div>
                    </body>
                    </html>
                """

                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'sami.ouerfelli@pm.me',
                    from: 'jenkins@server.com',
                    replyTo: 'jenkins@server.com',
                    mimeType: 'text/html'
                )
            }
        }
    }
}
